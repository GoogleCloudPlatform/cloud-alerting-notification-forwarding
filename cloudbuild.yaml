# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Cloud Build build file for Cloud Alerting notification integration. 
# It builds and submits the Docker image of the Cloud Run service that
# integrates the Google Cloud Alerting PubSub notification channels with
# a 3rd-party external service (e.g. Google Chat in the example) to Container
# Registry, and also applies Terraform configurations for the GCP project
# based on the current GitHub branch.
# For more information about Cloud Build, see:
# https://cloud.google.com/cloud-build/docs
# For more information about Cloud Build configuration file schema, see
# https://cloud.google.com/build/docs/build-config-file-schema 
# For more information about Terraform, see:
# https://www.terraform.io/docs/index.html
#
# The following Terraform steps are executed
# 1. terraform init
# 2. terraform refresh
# 3. terraform plan
# 4. terraform apply (if the env. variable 'DRY_RUN'='false')
#
# To test a build in your prod project manually:
# 1. Set your prod project as the GCP project for the gcloud invocation:
#    (replace PROD_PROJECT_ID with your prod GCP project id):
#    gcloud config set project PROD_PROJECT_ID
# 2. Manully trigger Cloud Build to set up resources in the project.
#    gcloud builds submit . --config cloudbuild.yaml --substitutions BRANCH_NAME=main,_DRY_RUN=False

steps:
- id: 'build docker image'
  # Uses the docker build command to build a docker image for Cloud Run
  name: 'gcr.io/cloud-builders/docker'
  args: ['build', '--build-arg', 'PROJECT_ID=$PROJECT_ID', '--build-arg', 'CONFIG_SERVER_TYPE=$_CONFIG_SERVER_TYPE', '--tag', 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}', './notification_integration']
  timeout: 300s # 5 minutes

- id: 'push docker image to Container Registry'
  name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}']

- id: 'check for required environment variables'
  name: 'bash'
  args: 
  - '-c'
  - | 
      # check if project id is set
      if [ -z "$PROJECT_ID" ]; then
        echo "***********************"
        echo "Missing required environment variable 'project_id'."
        echo "Set the project id by running 'gcloud config set project PROJECT_ID',"
        echo "where 'PROJECT_ID' is the Google Cloud Project ID that you want to deploy to."
        echo "Then, rerun Cloud Build."
        echo "***********************"
       fi

- id: 'check _DRY_RUN option'
  name: 'bash'
  args: 
  - '-c'
  - | 
      if [ "$_DRY_RUN" = "True" ]; then
        echo "***********************"
        echo "[DRY RUN mode] Planning terraform configs from git branch $BRANCH_NAME"
        echo "to google cloud project $PROJECT_ID."
        echo "To apply the configs, rerun this command with DRY_RUN=False."
        echo "***********************"
      else
        echo "***********************"
        echo "Applying terraform configs from git branch $BRANCH_NAME"
        echo "to google cloud project $PROJECT_ID"
        echo "***********************"  
      fi

- id: 'tf init'
  name: 'hashicorp/terraform:0.12.28'
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
      cd environments/$BRANCH_NAME
      echo ""
      echo "*************** TERRAFORM INIT ******************"
      echo "******* At environment: $BRANCH_NAME ********"
      echo "******* Terraform states are stored in the GCS bucket $PROJECT_ID-tfstate.********"
      echo "*************************************************"
      terraform init -backend-config "bucket=$PROJECT_ID-tfstate"
  timeout: 300s # 5 minutes

- id: 'tf refresh'
  name: 'hashicorp/terraform:0.12.28'
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
      cd environments/$BRANCH_NAME
      echo ""
      echo "*************** TERRAFORM REFRESH ******************"
      echo "******* At environment: $BRANCH_NAME ********"
      echo "*************************************************"
      terraform refresh -var="project_id=$PROJECT_ID"
  timeout: 300s # 5 minutes

- id: 'tf plan'
  name: 'hashicorp/terraform:0.12.28'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      cd environments/$BRANCH_NAME
      terraform plan -var="project_id=$PROJECT_ID"
  timeout: 300s # 5 minutes

- id: 'tf apply'
  name: 'hashicorp/terraform:0.12.28'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      if [ "$_DRY_RUN" = "True" ]; then
        echo "***************************** SKIPPING APPLYING *******************************"
        echo "Skipped tf apply since it is a dry run."
        echo "*******************************************************************************"
      else
        cd environments/$BRANCH_NAME      
        terraform apply -auto-approve -var="project_id=$PROJECT_ID"
      fi
  timeout: 600s # 10 minutes

# set substitution variables
substitutions:
  _IMAGE_NAME: "cloud-run-pubsub-service"
  
# image is pushed to Container Registry
images:
- 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}'